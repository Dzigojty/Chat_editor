from telethon import TelegramClient, __version__ as telethon_version
from telethon.tl.types import InputPeerEmpty, ReactionEmoji
from telethon.tl.functions.messages import SendReactionRequest
from fastapi import APIRouter, HTTPException, status
from fastapi.responses import JSONResponse
from schemas.user import User
from config import settings
import logging
import asyncio


router = APIRouter(prefix="/chat")
logger = logging.getLogger(__name__)


async def get_all_messages(client, entity):
    all_messages = []
    async for message in client.iter_messages(entity):
        all_messages.append({
            "id": message.id,
            "text": message.text,
            "date": message.date,
            "sender": message.sender_id
        })
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if len(all_messages) % 100 == 0:
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    return all_messages


async def send_reaction_safe(client, entity, message_id, reaction):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏"""
    try:
        reaction_obj = ReactionEmoji(emoticon=reaction)
        
        if hasattr(client, 'send_reaction'):
            return await client.send_reaction(
                entity=entity,
                message_id=message_id,
                reaction=[reaction_obj]
            )
        
        return await client(SendReactionRequest(
            peer=entity,
            msg_id=message_id,
            reaction=[reaction_obj]
        ))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}", exc_info=True)
        raise


async def process_dialog(client, dialog):
    try:
        # –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —é–∑–µ—Ä–∞)
        skip_conditions = (
            not dialog.is_user,  # <-- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞!
            isinstance(dialog.entity, InputPeerEmpty),
            getattr(dialog, 'archived', False)
        )
        
        if any(skip_conditions):
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω –¥–∏–∞–ª–æ–≥: {dialog.name}")
            return None
        
         # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        all_messages = []
        offset_id = 0
        has_reactions = False
        
        while True:
            messages = await client.get_messages(
                dialog.entity,
                limit=100,
                offset_id=offset_id
            )
            
            if not messages:
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–∫—Ü–∏–π
            for message in messages:
                if message.reactions:
                    logger.debug(f"–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏ –≤ —á–∞—Ç–µ {dialog.name} (ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id})")
                    has_reactions = True
                    break
                    
            if has_reactions:
                return None
                
            all_messages.extend(messages)
            offset_id = messages[-1].id
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        print(all_messages)

        if not all_messages:
            logger.debug(f"–ü—É—Å—Ç–æ–π —á–∞—Ç: {dialog.name}")
            return None

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —Ä–µ–∞–∫—Ü–∏–π –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        last_message = all_messages[0]
        await send_reaction_safe(client, dialog.entity, last_message.id, "üëÄ")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏
        await asyncio.sleep(1)
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –¥–∏–∞–ª–æ–≥: {dialog.name} (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {last_message.id})")
        return dialog.name
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {dialog.name}: {str(e)}", exc_info=True)
        return None


@router.get("/change/", response_model=dict)
async def change_chat():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    try:
        async with TelegramClient(
            session='session_name',
            api_id=settings.API_ID,
            api_hash=settings.API_HASH
        ) as client:
            await client.start()
            
            logger.info(f"Telethon version: {telethon_version}")
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏
            dialogs = await client.get_dialogs()
            processed = []
            
            for dialog in dialogs:
                result = await process_dialog(client, dialog)
                if result:
                    processed.append(result)
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –¥–∏–∞–ª–æ–≥: {result}")
            
            return JSONResponse(
                status_code=status.HTTP_200_OK,
                content={
                    "status": "success",
                    "processed_dialogs": processed,
                    "count": len(processed),
                    "telethon_version": telethon_version
                }
            )
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
