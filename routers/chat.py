from telethon import TelegramClient, __version__ as telethon_version
from telethon.tl.types import InputPeerEmpty
from telethon.tl.functions.messages import SendReactionRequest
from fastapi import APIRouter, HTTPException, status
from fastapi.responses import JSONResponse
from telethon.tl.types import ReactionEmoji  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from schemas.user import User
from config import settings
import logging
import asyncio

router = APIRouter(prefix="/chat")
logger = logging.getLogger(__name__)

async def send_reaction_safe(client, entity, message_id, reaction):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∞–∫—Ü–∏–∏
        reaction_obj = ReactionEmoji(emoticon=reaction)
        
        # –î–ª—è Telethon 1.28+
        if hasattr(client, 'send_reaction'):
            return await client.send_reaction(
                entity=entity,
                message_id=message_id,
                reaction=[reaction_obj]  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π
            )
        
        # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
        return await client(SendReactionRequest(
            peer=entity,
            msg_id=message_id,
            reaction=[reaction_obj]  # –í—Å–µ–≥–¥–∞ —Å–ø–∏—Å–æ–∫
        ))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {str(e)}")
        raise

async def process_dialog(client, dialog):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—É—Å—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏
        if not dialog.is_user or isinstance(dialog.entity, InputPeerEmpty):
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = await client.get_messages(dialog.entity, limit=1)
        if not messages:
            return None
        
        last_msg = messages[0]
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏
        if last_msg.reactions:
            return None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        await send_reaction_safe(client, dialog.entity, last_msg.id, "üëÄ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è FloodWait
        await asyncio.sleep(1)
        
        return dialog.name
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {str(e)}")
        return None

@router.get("/change/", response_model=dict)
async def change_chat():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤"""
    try:
        async with TelegramClient(
            session='session_name',
            api_id=settings.API_ID,
            api_hash=settings.API_HASH
        ) as client:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await client.start()
            
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telethon –≤–µ—Ä—Å–∏–∏ {telethon_version}")
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
            dialogs = await client.get_dialogs()
            processed = []
            
            for dialog in dialogs:
                dialog_name = await process_dialog(client, dialog)
                if dialog_name:
                    processed.append(dialog_name)
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –¥–∏–∞–ª–æ–≥: {dialog_name}")
            
            return {
                "status": "success",
                "processed_dialogs": processed,
                "count": len(processed),
                "telethon_version": telethon_version
            }
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )